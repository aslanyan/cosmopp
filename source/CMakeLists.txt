cmake_minimum_required (VERSION 2.8.10)

set(LIB_FILES macros.cpp test_framework.cpp whole_matrix.cpp scale_factor.cpp markov_chain.cpp matrix_impl.cpp)

set(TEST_FILES test_unit_conversions.cpp test_int_operations.cpp test_integral.cpp test_conjugate_gradient.cpp test_polynomial.cpp test_legendre.cpp test_spherical_harmonics.cpp test_matrix.cpp test_wigner_3j.cpp test_table_function.cpp test_cubic_spline.cpp test_three_rotation.cpp)

if(LAPACK_LIB_FLAGS)
	set(LIB_FILES ${LIB_FILES} mcmc.cpp)
	set(TEST_FILES ${TEST_FILES} test_mcmc.cpp)
endif(LAPACK_LIB_FLAGS)

if(HEALPIX_DIR)
	set(LIB_FILES ${LIB_FILES} utils.cpp c_matrix.cpp c_matrix_generator.cpp mode_directions.cpp cmb_gibbs.cpp mask_apodizer.cpp)
	set(TEST_FILES ${TEST_FILES} test_mask_apodizer.cpp)
endif(HEALPIX_DIR)

if(CLASS_DIR)
	set(LIB_FILES ${LIB_FILES} cmb.cpp)
	set(TEST_FILES ${TEST_FILES} test_cmb.cpp)
endif(CLASS_DIR)

if(MINUIT_DIR)
	set(TEST_FILES ${TEST_FILES} test_fit.cpp)
endif(MINUIT_DIR)

if(MULTINEST_DIR)
	set(LIB_FILES ${LIB_FILES} mn_scanner.cpp)
	set(TEST_FILES ${TEST_FILES} test_multinest.cpp)
endif(MULTINEST_DIR)

if(POLYCHORD_DIR)
	set(LIB_FILES ${LIB_FILES} polychord_wrapper.f90 polychord.cpp)
	set(TEST_FILES ${TEST_FILES} test_polychord.cpp)
endif(POLYCHORD_DIR)

if(LAPACK_LIB_FLAGS AND HEALPIX_DIR)
	set(LIB_FILES ${LIB_FILES} simulate.cpp likelihood.cpp master.cpp)
endif(LAPACK_LIB_FLAGS AND HEALPIX_DIR)

if(LAPACK_LIB_FLAGS AND CLASS_DIR)
	set(LIB_FILES ${LIB_FILES} matter_likelihood.cpp)
	set(TEST_FILES ${TEST_FILES} test_matter_likelihood.cpp)
endif(LAPACK_LIB_FLAGS AND CLASS_DIR)

if(LAPACK_LIB_FLAGS AND HEALPIX_DIR AND CLASS_DIR)
	set(TEST_FILES ${TEST_FILES} test_cmb_gibbs.cpp test_like_high.cpp test_like_low.cpp)
endif(LAPACK_LIB_FLAGS AND HEALPIX_DIR AND CLASS_DIR)

if(CLASS_DIR AND PLANCK_DIR)
	set(LIB_FILES ${LIB_FILES} planck_like.cpp)
	set(TEST_FILES ${TEST_FILES} test_planck_like.cpp)
endif(CLASS_DIR AND PLANCK_DIR)

if(CLASS_DIR AND WMAP9_DIR)
	set(LIB_FILES ${LIB_FILES} wmap9_like.cpp)
	set(TEST_FILES ${TEST_FILES} test_wmap9_like.cpp)
endif(CLASS_DIR AND WMAP9_DIR)

if(LAPACK_LIB_FLAGS AND CLASS_DIR AND PLANCK_DIR)
	set(TEST_FILES ${TEST_FILES} test_mcmc_planck.cpp)
endif(LAPACK_LIB_FLAGS AND CLASS_DIR AND PLANCK_DIR)

if(CLASS_DIR AND MULTINEST_DIR AND PLANCK_DIR)
	set(TEST_FILES ${TEST_FILES} test_multinest_planck.cpp)
endif(CLASS_DIR AND MULTINEST_DIR AND PLANCK_DIR)

if(CLASS_DIR AND POLYCHORD_DIR AND PLANCK_DIR)
	set(TEST_FILES ${TEST_FILES} test_polychord_planck.cpp)
endif(CLASS_DIR AND POLYCHORD_DIR AND PLANCK_DIR)


add_library(cosmopp STATIC ${LIB_FILES})

add_executable(cosmo_test test.cpp ${TEST_FILES})
target_link_libraries(cosmo_test cosmopp)
if(MPI_FOUND)
	target_link_libraries(cosmo_test ${MPI_C_LIBRARIES})
endif(MPI_FOUND)
if(LAPACK_LIB_FLAGS)
	target_link_libraries(cosmo_test ${LAPACK_LIB_FLAGS})
endif(LAPACK_LIB_FLAGS)
if(CFITSIO_DIR)
	target_link_libraries(cosmo_test ${CFITSIOLIB})
endif(CFITSIO_DIR)
if(HEALPIX_DIR)
	target_link_libraries(cosmo_test ${CHEALPIXLIB} ${HEALPIXCXXLIB} ${CXXSUPPORTLIB} ${SHARPLIB} ${FFTPACKLIB} ${CUTILSLIB})
endif(HEALPIX_DIR)
if(CLASS_DIR)
	target_link_libraries(cosmo_test ${CLASSLIB})
endif(CLASS_DIR)
if(MINUIT_DIR)
	target_link_libraries(cosmo_test ${MINUITLIB})
endif(MINUIT_DIR)
if(MULTINEST_DIR)
	target_link_libraries(cosmo_test ${MULTINESTLIB})
endif(MULTINEST_DIR)
if(POLYCHORD_DIR)
	target_link_libraries(cosmo_test ${POLYCHORDLIB})
	if(MPI_FOUND)
		target_link_libraries(cosmo_test ${MPI_Fortran_LIBRARIES})
	endif(MPI_FOUND)
endif(POLYCHORD_DIR)
if(PLANCK_DIR)
	target_link_libraries(cosmo_test ${PLANCKLIB})
endif(PLANCK_DIR)
if(WMAP9_DIR)
	target_link_libraries(cosmo_test ${WMAP9LIB})
endif(WMAP9_DIR)


if(HEALPIX_DIR)
	add_executable(apodize_mask apodize_mask.cpp)
	target_link_libraries(apodize_mask cosmopp)
	if(MPI_FOUND)
		target_link_libraries(apodize_mask ${MPI_C_LIBRARIES})
	endif(MPI_FOUND)
	target_link_libraries(apodize_mask ${CFITSIOLIB})
	target_link_libraries(apodize_mask ${CHEALPIXLIB} ${HEALPIXCXXLIB} ${CXXSUPPORTLIB} ${SHARPLIB} ${FFTPACKLIB} ${CUTILSLIB})
endif(HEALPIX_DIR)


if(LAPACK_LIB_FLAGS AND HEALPIX_DIR)
	add_executable(generate_white_noise generate_white_noise.cpp)
	target_link_libraries(generate_white_noise cosmopp)
	if(MPI_FOUND)
		target_link_libraries(generate_white_noise ${MPI_C_LIBRARIES})
	endif(MPI_FOUND)
	target_link_libraries(generate_white_noise ${LAPACK_LIB_FLAGS})
	target_link_libraries(generate_white_noise ${CFITSIOLIB})
	target_link_libraries(generate_white_noise ${CHEALPIXLIB} ${HEALPIXCXXLIB} ${CXXSUPPORTLIB} ${SHARPLIB} ${FFTPACKLIB} ${CUTILSLIB})
endif(LAPACK_LIB_FLAGS AND HEALPIX_DIR)
