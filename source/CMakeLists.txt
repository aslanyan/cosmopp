cmake_minimum_required (VERSION 2.8.10)

set(LIB_FILES macros.cpp test_framework.cpp whole_matrix.cpp scale_factor.cpp markov_chain.cpp matrix_impl.cpp kd_tree.cpp)

set(TEST_FILES test_unit_conversions.cpp test_int_operations.cpp test_integral.cpp test_conjugate_gradient.cpp test_polynomial.cpp test_legendre.cpp test_spherical_harmonics.cpp test_matrix.cpp test_wigner_3j.cpp test_table_function.cpp test_cubic_spline.cpp test_three_rotation.cpp test_kd_tree.cpp)

if(LAPACK_LIB_FLAGS)
	set(LIB_FILES ${LIB_FILES} mcmc.cpp)
	set(TEST_FILES ${TEST_FILES} test_mcmc.cpp)
endif(LAPACK_LIB_FLAGS)

if(HEALPIX_DIR)
	set(LIB_FILES ${LIB_FILES} utils.cpp c_matrix.cpp c_matrix_generator.cpp mode_directions.cpp cmb_gibbs.cpp mask_apodizer.cpp)
	set(TEST_FILES ${TEST_FILES} test_mask_apodizer.cpp)
endif(HEALPIX_DIR)

if(CLASS_DIR)
	set(LIB_FILES ${LIB_FILES} cmb.cpp)
	set(TEST_FILES ${TEST_FILES} test_cmb.cpp)
endif(CLASS_DIR)

if(MINUIT_DIR)
	set(TEST_FILES ${TEST_FILES} test_fit.cpp)
endif(MINUIT_DIR)

if(MULTINEST_DIR)
	set(LIB_FILES ${LIB_FILES} mn_scanner.cpp)
	set(TEST_FILES ${TEST_FILES} test_multinest.cpp)
endif(MULTINEST_DIR)

if(POLYCHORD_DIR)
	set(LIB_FILES ${LIB_FILES} polychord_wrapper.f90 polychord.cpp)
	set(TEST_FILES ${TEST_FILES} test_polychord.cpp)
endif(POLYCHORD_DIR)

if(LAPACK_LIB_FLAGS AND HEALPIX_DIR)
	set(LIB_FILES ${LIB_FILES} simulate.cpp likelihood.cpp master.cpp)
endif(LAPACK_LIB_FLAGS AND HEALPIX_DIR)

if(LAPACK_LIB_FLAGS AND HEALPIX_DIR AND CLASS_DIR)
	set(TEST_FILES ${TEST_FILES} test_cmb_gibbs.cpp test_like_high.cpp test_like_low.cpp)
endif(LAPACK_LIB_FLAGS AND HEALPIX_DIR AND CLASS_DIR)

if(CLASS_DIR AND PLANCK_DIR)
	set(LIB_FILES ${LIB_FILES} planck_like.cpp)
	set(TEST_FILES ${TEST_FILES} test_planck_like.cpp)
endif(CLASS_DIR AND PLANCK_DIR)

if(CLASS_DIR AND WMAP9_DIR)
	set(LIB_FILES ${LIB_FILES} wmap9_like.cpp sample.f90)
	set(TEST_FILES ${TEST_FILES} test_wmap9_like.cpp)
endif(CLASS_DIR AND WMAP9_DIR)

if(LAPACK_LIB_FLAGS AND CLASS_DIR AND PLANCK_DIR)
	set(TEST_FILES ${TEST_FILES} test_mcmc_planck.cpp)
endif(LAPACK_LIB_FLAGS AND CLASS_DIR AND PLANCK_DIR)

if(CLASS_DIR AND MULTINEST_DIR AND PLANCK_DIR)
	set(TEST_FILES ${TEST_FILES} test_multinest_planck.cpp)
endif(CLASS_DIR AND MULTINEST_DIR AND PLANCK_DIR)

if(CLASS_DIR AND POLYCHORD_DIR AND PLANCK_DIR)
	set(TEST_FILES ${TEST_FILES} test_polychord_planck.cpp)
endif(CLASS_DIR AND POLYCHORD_DIR AND PLANCK_DIR)

if(LAPACK_LIB_FLAGS)
	set(LIB_FILES ${LIB_FILES} fast_approximator.cpp fast_approximator_error.cpp learn_as_you_go.cpp)
	set(TEST_FILES ${TEST_FILES} test_fast_approximator.cpp test_fast_approximator_error.cpp)
endif(LAPACK_LIB_FLAGS)

if(LAPACK_LIB_FLAGS AND CLASS_DIR AND PLANCK_DIR)
	set(LIB_FILES ${LIB_FILES} planck_like_fast.cpp)
	set(TEST_FILES ${TEST_FILES} test_mcmc_planck_fast.cpp)
endif(LAPACK_LIB_FLAGS AND CLASS_DIR AND PLANCK_DIR)

if(LAPACK_LIB_FLAGS AND CLASS_DIR AND PLANCK_DIR AND MULTINEST_DIR)
	set(TEST_FILES ${TEST_FILES} test_multinest_planck_fast.cpp)
endif(LAPACK_LIB_FLAGS AND CLASS_DIR AND PLANCK_DIR AND MULTINEST_DIR)


add_library(cosmopp STATIC ${LIB_FILES})
install(TARGETS cosmopp DESTINATION lib)

add_executable(cosmo_test test.cpp ${TEST_FILES})
target_link_libraries(cosmo_test cosmopp)
if(MPI_FOUND)
	target_link_libraries(cosmo_test ${MPI_CXX_LIBRARIES})
endif(MPI_FOUND)
if(LAPACK_LIB_FLAGS)
	target_link_libraries(cosmo_test ${LAPACK_LIB_FLAGS})
endif(LAPACK_LIB_FLAGS)
if(HEALPIX_DIR)
	target_link_libraries(cosmo_test ${CHEALPIXLIB} ${HEALPIXCXXLIB} ${CXXSUPPORTLIB} ${SHARPLIB} ${FFTPACKLIB} ${CUTILSLIB})
endif(HEALPIX_DIR)
if(CLASS_DIR)
	target_link_libraries(cosmo_test ${CLASSLIB})
endif(CLASS_DIR)
if(MINUIT_DIR)
	target_link_libraries(cosmo_test ${MINUITLIB})
endif(MINUIT_DIR)
if(MULTINEST_DIR)
	target_link_libraries(cosmo_test ${MULTINESTLIB})
endif(MULTINEST_DIR)
if(POLYCHORD_DIR)
	target_link_libraries(cosmo_test ${POLYCHORDLIB})
	if(MPI_FOUND)
		target_link_libraries(cosmo_test ${MPI_Fortran_LIBRARIES})
	endif(MPI_FOUND)
endif(POLYCHORD_DIR)
if(PLANCK_DIR)
	target_link_libraries(cosmo_test ${PLANCKLIB})
	target_link_libraries(cosmo_test -dynamic)
endif(PLANCK_DIR)
if(WMAP9_DIR)
	target_link_libraries(cosmo_test ${WMAP9LIB})
endif(WMAP9_DIR)
if(CFITSIO_DIR)
	target_link_libraries(cosmo_test ${CFITSIOLIB})
endif(CFITSIO_DIR)
install(TARGETS cosmo_test DESTINATION bin)

if(CLASS_DIR AND PLANCK_DIR AND POLYCHORD_DIR AND MULTINEST_DIR)
    add_executable(knotted knotted.cpp)
    target_link_libraries(knotted cosmopp)
    if(MPI_FOUND)
        target_link_libraries(knotted ${MPI_CXX_LIBRARIES})
    endif(MPI_FOUND)
    if(LAPACK_LIB_FLAGS)
        target_link_libraries(knotted ${LAPACK_LIB_FLAGS})
    endif(LAPACK_LIB_FLAGS)
    if(CFITSIO_DIR)
        target_link_libraries(knotted ${CFITSIOLIB})
    endif(CFITSIO_DIR)
    target_link_libraries(knotted ${CLASSLIB})
    target_link_libraries(knotted ${POLYCHORDLIB})
    target_link_libraries(knotted ${MULTINESTLIB})
    if(MPI_FOUND)
	target_link_libraries(knotted ${MPI_Fortran_LIBRARIES})
    endif(MPI_FOUND)
target_link_libraries(knotted ${PLANCKLIB})
endif(CLASS_DIR AND PLANCK_DIR AND POLYCHORD_DIR AND MULTINEST_DIR)

add_test(NAME unit_conversions COMMAND cosmo_test unit_conversions WORKING_DIRECTORY ${PROJECT_BINARY_DIR})
add_test(NAME int_operations COMMAND cosmo_test int_operations WORKING_DIRECTORY ${PROJECT_BINARY_DIR})
add_test(NAME integral COMMAND cosmo_test integral WORKING_DIRECTORY ${PROJECT_BINARY_DIR})
add_test(NAME conjugate_gradient COMMAND cosmo_test conjugate_gradient WORKING_DIRECTORY ${PROJECT_BINARY_DIR})
add_test(NAME polynomial COMMAND cosmo_test polynomial WORKING_DIRECTORY ${PROJECT_BINARY_DIR})
add_test(NAME legendre COMMAND cosmo_test legendre WORKING_DIRECTORY ${PROJECT_BINARY_DIR})
add_test(NAME spherical_harmonics COMMAND cosmo_test spherical_harmonics WORKING_DIRECTORY ${PROJECT_BINARY_DIR})
add_test(NAME matrix COMMAND cosmo_test matrix WORKING_DIRECTORY ${PROJECT_BINARY_DIR})
add_test(NAME wigner_3j COMMAND cosmo_test wigner_3j WORKING_DIRECTORY ${PROJECT_BINARY_DIR})
add_test(NAME table_function COMMAND cosmo_test table_function WORKING_DIRECTORY ${PROJECT_BINARY_DIR})
add_test(NAME cubic_spline COMMAND cosmo_test cubic_spline WORKING_DIRECTORY ${PROJECT_BINARY_DIR})
add_test(NAME three_rotation COMMAND cosmo_test three_rotation WORKING_DIRECTORY ${PROJECT_BINARY_DIR})
add_test(NAME kd_tree COMMAND cosmo_test kd_tree WORKING_DIRECTORY ${PROJECT_BINARY_DIR})
if(LAPACK_LIB_FLAGS)
	add_test(NAME mcmc_fast COMMAND cosmo_test mcmc_fast WORKING_DIRECTORY ${PROJECT_BINARY_DIR})
	add_test(NAME fast_approximator COMMAND cosmo_test fast_approximator WORKING_DIRECTORY ${PROJECT_BINARY_DIR})
	add_test(NAME fast_approximator_error COMMAND cosmo_test fast_approximator_error WORKING_DIRECTORY ${PROJECT_BINARY_DIR})
endif(LAPACK_LIB_FLAGS)
if(MULTINEST_DIR)
	add_test(NAME multinest_fast COMMAND cosmo_test multinest_fast WORKING_DIRECTORY ${PROJECT_BINARY_DIR})
endif(MULTINEST_DIR)
if(POLYCHORD_DIR)
	add_test(NAME polychord_fast COMMAND cosmo_test polychord_fast WORKING_DIRECTORY ${PROJECT_BINARY_DIR})
endif(POLYCHORD_DIR)
if(CLASS_DIR)
	add_test(NAME cmb COMMAND cosmo_test cmb WORKING_DIRECTORY ${PROJECT_BINARY_DIR})
endif(CLASS_DIR)
if(MINUIT_DIR)
	add_test(NAME fit COMMAND cosmo_test fit WORKING_DIRECTORY ${PROJECT_BINARY_DIR})
endif(MINUIT_DIR)
if(CLASS_DIR)
	if(PLANCK_DIR)
		add_test(NAME planck_like COMMAND cosmo_test planck_like WORKING_DIRECTORY ${PROJECT_BINARY_DIR})
	endif(PLANCK_DIR)
	if(WMAP9_DIR)
		add_test(NAME wmap9_like COMMAND cosmo_test wmap9_like WORKING_DIRECTORY ${PROJECT_BINARY_DIR})
	endif(WMAP9_DIR)
endif(CLASS_DIR)



if(HEALPIX_DIR)
	add_executable(apodize_mask apodize_mask.cpp)
	target_link_libraries(apodize_mask cosmopp)
	if(MPI_FOUND)
		target_link_libraries(apodize_mask ${MPI_CXX_LIBRARIES})
	endif(MPI_FOUND)
	target_link_libraries(apodize_mask ${CHEALPIXLIB} ${HEALPIXCXXLIB} ${CXXSUPPORTLIB} ${SHARPLIB} ${FFTPACKLIB} ${CUTILSLIB})
	target_link_libraries(apodize_mask ${CFITSIOLIB})
	install(TARGETS apodize_mask DESTINATION bin)
endif(HEALPIX_DIR)


if(LAPACK_LIB_FLAGS AND HEALPIX_DIR)
	add_executable(generate_white_noise generate_white_noise.cpp)
	target_link_libraries(generate_white_noise cosmopp)
	if(MPI_FOUND)
		target_link_libraries(generate_white_noise ${MPI_CXX_LIBRARIES})
	endif(MPI_FOUND)
	target_link_libraries(generate_white_noise ${CHEALPIXLIB} ${HEALPIXCXXLIB} ${CXXSUPPORTLIB} ${SHARPLIB} ${FFTPACKLIB} ${CUTILSLIB})
	target_link_libraries(generate_white_noise ${CFITSIOLIB})
	target_link_libraries(generate_white_noise ${LAPACK_LIB_FLAGS})
	install(TARGETS generate_white_noise DESTINATION bin)
endif(LAPACK_LIB_FLAGS AND HEALPIX_DIR)
